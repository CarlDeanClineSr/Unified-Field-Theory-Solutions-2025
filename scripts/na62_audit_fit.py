#!/usr/bin/env python3
"""
NA62 Audit Fit Script - Relay 005
Validates CSV schema and runs audit harness for kaon decay analysis.
"""

import argparse
import os
import pandas as pd


def main():
    parser = argparse.ArgumentParser(description='NA62 Audit Fit Analysis')
    parser.add_argument('--csv', required=True, help='Path to NA62 candidates CSV file')
    parser.add_argument('--out', default='results', help='Output directory')
    args = parser.parse_args()
    
    # Create output directory
    os.makedirs(args.out, exist_ok=True)
    
    # Load and validate CSV
    try:
        df = pd.read_csv(args.csv)
        print(f"Loaded {len(df)} candidate events from {args.csv}")
        
        # Basic validation
        required_columns = ['event_id', 'run_id', 'kaon_type', 'veto_status']
        missing_cols = [col for col in required_columns if col not in df.columns]
        if missing_cols:
            raise ValueError(f"Missing required columns: {missing_cols}")
            
        # Run basic audit
        signal_count = len(df[df['veto_status'] == 'pass'])
        background_count = len(df[df['veto_status'] == 'fail'])
        
        # Get baseline values from environment
        baseline_br = float(os.environ.get('NA62_BASELINE_BR', '1.06e-10'))
        baseline_sigma = float(os.environ.get('NA62_BASELINE_SIGMA', '3.7e-11'))
        
        # Create summary
        summary = f"""# Relay 005 — NA62 Audit Summary

## Event Counts
- Total events: {len(df)}
- Signal candidates (veto pass): {signal_count}
- Background events (veto fail): {background_count}

## Baseline Parameters
- BR(K+ → π+νν̄): {baseline_br:.2e}
- Uncertainty: {baseline_sigma:.2e}

## Schema Validation
✓ All required columns present: {', '.join(required_columns)}
✓ CSV format valid

Generated by: scripts/na62_audit_fit.py
"""
        
        # Write summary
        summary_path = os.path.join(args.out, 'audit_summary.md')
        with open(summary_path, 'w') as f:
            f.write(summary)
            
        print(f"Audit complete. Summary written to {summary_path}")
        
    except Exception as e:
        print(f"Error processing CSV: {e}")
        return 1
        
    return 0


if __name__ == '__main__':
    exit(main())