name: "Project: setup or add"
on:
  workflow_dispatch: {}
  issues:
    types: [opened]
  pull_request:
    types: [opened]
permissions:
  contents: read
  issues: write
  pull-requests: write
  projects: write
jobs:
  ensure-project:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Ensure repo project exists
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const projectName = 'LUFT Coordination Board';
            // List repo projects
            const { data: projects } = await github.rest.projects.listForRepo({ owner, repo });
            let project = projects.find(p => p.name === projectName);
            if (!project) {
              project = (await github.rest.projects.createForRepo({ owner, repo, name: projectName, body: 'Tracking tasks for LUFT Repo 13' })).data;
              core.info(`Created project: ${project.html_url}`);
              // Create default columns
              const cols = ['To do','In progress','Done'];
              for (const name of cols) {
                await github.rest.projects.createColumn({ project_id: project.id, name });
              }
            } else {
              core.info(`Project exists: ${project.html_url}`);
            }
  add-to-project:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Add card to project
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const projectName = 'LUFT Coordination Board';
            const { data: projects } = await github.rest.projects.listForRepo({ owner, repo });
            const project = projects.find(p => p.name === projectName);
            if (!project) {
              core.info('Project not found; run the workflow_dispatch to create it.');
              return;
            }
            // Find the 'To do' column
            const { data: columns } = await github.rest.projects.listColumns({ project_id: project.id });
            const todo = columns.find(c => c.name.toLowerCase().includes('to do')) || columns[0];
            if (!todo) { core.info('No column found.'); return; }
            if (context.eventName === 'issues') {
              await github.rest.projects.createCard({ column_id: todo.id, content_id: context.payload.issue.id, content_type: 'Issue' });
            } else if (context.eventName === 'pull_request') {
              const pr = context.payload.pull_request;
              await github.rest.projects.createCard({ column_id: todo.id, content_id: pr.id, content_type: 'PullRequest' });
            }